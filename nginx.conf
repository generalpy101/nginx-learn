user www-data;
# http context to respond to request
http {
	# No need to specify types manually
	include mime.types;
	# Type context for mime types
	# types {
	# 	# css extension will give text/css
	# 	text/css css;
	# 	# html extension will give text/html
	# 	text/html html;
	# }

	# Context  for our server
	# named backendserver, can be changed
	# can specify backend urls we have
	upstream backendserver {
		server 127.0.0.1:7777;
		server 127.0.0.1:8888;
		server 127.0.0.1:9999;
	}
	# server context
	server {
		# listen directive, port where to listen
		listen 80;
		# root path after listening
		root path_to_this_repo;
		# location context can be used for routing

		# Configuring as load balancer
		location / {
			# uses round robin by default
			proxy_pass http://backendserver;
		}

		location /fruits {
			# Go to this path when fruits route is hit
			# /fruits is automatically appended from above
			root path_to_this_repo;
		}

		location /sweets {
			# Alias will not append route to directory structure
			# so sweets will redirect to same file as fruits
			alias path_to_this_repo/fruits;
		}

		location /vegetables {
			root path_to_this_repo;
			# serving some other file then index.html
			# try_files will first try to file veggies.html, if not found 
			# get root index.html(in project root) otherwise 404
			try_files /vegetables/veggies.html /index.html =404;
		}

		# use regex
		location ~* /count/[0-9] {
			root path_to_this_repo;
			try_files /index.html =404;
		}

		# redirect
		location /crops {
			# redirect to /fruits
			# temporary redirect
			return 307 /fruits;
		}

		# in rewirte our path would be original one
		# but response will be rewritten
		# Here $1 is the variable after number (w+ meaning numbers)
		rewrite ^/number/(\w+) /count/$1;
	}
}

# Not used but needed by nginx to work
events {}